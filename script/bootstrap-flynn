#!/bin/bash

set -e

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
source "${ROOT}/script/lib/ui.sh"

usage() {
  cat <<USAGE >&2
usage: $0 [options]

Boot a Flynn cluster.

Use the --size flag to boot a multi-node cluster, which will create a virtual
network interface for each node and bind all host network services to that
interface (i.e. flynn-host, discoverd, flannel and router)

OPTIONS:
  -h, --help               Show this message
  -s, --size=SIZE          Cluster size [default: 1]
  -d, --domain=DOMAIN      The default domain to use [default: `dev.localflynn.com`]
  -z, --no-destroy-vols    Don't destroy volumes
USAGE
}

main() {
  local size="1"
  local domain="${CLUSTER_DOMAIN:="dev.localflynn.com"}"
  local destroy_vols=true

  while true; do
    case "$1" in
      -h | --help)
        usage
        exit 0
        ;;
      -s | --size)
        if [[ -z "$2" ]]; then
          usage
          exit 1
        fi
        size="$2"
        shift 2
        ;;
      -d | --domain)
        if [[ -z "$2" ]]; then
          usage
          exit 1
        fi
        domain="$2"
        shift 2
        ;;
      -z | --no-destroy-vols)
        destroy_vols=false
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -ne 0 ]]; then
    usage
    exit 1
  fi


  # kill flynn first
  "${ROOT}/script/kill-flynn"

  local host_dir="${ROOT}/host"
  local bootstrap_dir="${ROOT}/bootstrap"

  local ips=()
  if [[ "${size}" -eq "1" ]]; then
    info "starting single node cluster"
    local external_ip="$(ifconfig eth0 | grep -oP 'inet addr:\S+' | cut -d: -f2)"
    start_flynn_host
  else
    info "starting ${size} node cluster"

    # don't create unnecessary vxlan devices
    export FLANNEL_BACKEND="alloc"

    for index in $(seq 0 $((size - 1))); do
      # An RFC 5737 TEST-NET IP
      local external_ip="192.0.2.20$(($index))"
      local listen_ip="${external_ip}"
      domain="${size}.localflynn.com"

      info "starting flynn-host using IP ${external_ip}"
      sudo ifconfig "eth0:${index}" "${external_ip}"
      start_flynn_host "${index}"
    done
  fi

  info "bootstrapping Flynn"
  export CLUSTER_DOMAIN="${domain}"
  export DISCOVERD="$(join "," ${ips[@]})"
  "${host_dir}/bin/flynn-host" \
    bootstrap \
    --min-hosts="${size}" \
    --peer-ips="$(join "," ${ips[@]})" \
    "${bootstrap_dir}/bin/manifest.json"
}

start_flynn_host() {
  local index=$1

  # if index is not set (i.e. a single node cluster), use non-namespaced names
  if [[ -z "${index}" ]]; then
    local id="host"
    local state="/tmp/flynn-host-state.bolt"
    local pidfile="/tmp/flynn-host.pid"
    local bridge_name="flynnbr0"
    local vol_path="/var/lib/flynn/volumes"
    local log_dir="/var/log/flynn"
    local log="/tmp/flynn-host-$(date +%Y-%m-%dT%H-%M-%S.%N).log"
    ln -nfs "${log}" "/tmp/flynn-host.log"
  else
    local id="host${index}"
    local state="/tmp/flynn-host-state-${index}.bolt"
    local pidfile="/tmp/flynn-host-${index}.pid"
    local bridge_name="flynnbr${index}"
    local vol_path="/var/lib/flynn/volumes-${index}"
    local log_dir="/var/log/flynn/host-${index}"
    local log="/tmp/flynn-host-${index}-$(date +%Y-%m-%dT%H-%M-%S.%N).log"
    ln -nfs "${log}" "/tmp/flynn-host-${index}.log"
  fi

  # delete the old state
  sudo rm -f "${state}"

  if $destroy_vols; then
    sudo "${ROOT}/host/bin/flynn-host" destroy-volumes --volpath="${vol_path}" --include-data
  fi

  # ensure log dir exists
  sudo mkdir -p $log_dir

  sudo start-stop-daemon \
    --start \
    --background \
    --no-close \
    --pidfile "${pidfile}" \
    --exec "${host_dir}/bin/flynn-host" \
    -- \
    daemon \
    --id "${id}" \
    --external-ip "${external_ip}" \
    --listen-ip "${listen_ip}" \
    --bridge-name "${bridge_name}" \
    --force \
    --state "${state}" \
    --volpath "${vol_path}" \
    --log-dir "${log_dir}" \
    --flynn-init "${host_dir}/bin/flynn-init" \
    --nsumount "${host_dir}/bin/flynn-nsumount" \
    &>"${log}"

  ips+=("${external_ip}")
}

join() {
  local IFS="$1"
  shift
  echo "$*"
}

main $@
